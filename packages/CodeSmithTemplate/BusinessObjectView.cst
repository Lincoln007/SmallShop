
<%@ CodeTemplate Language="C#" ResponseEncoding="UTF-8" TargetLanguage="Text" Src="Helper.cs" Inherits="Helper" Debug="False" Description="Template description here." %>
<%-- 程序集--%>
<%@ Assembly Name="System.Data" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%--导入命名空间 --%>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System.Text" %>
<%@ Import Namespace="SchemaExplorer" %>
<%--定义属性 --%>
<%@ Property Name="NameSpace" Type="System.String" Default="" Optional="False" Category="命名空间" Description="当前生成实体类的命名空间"  %>
<%@ Property Name="View" Type="SchemaExplorer.ViewSchema" Default="" Optional="False" Category="数据库表对象" Description="实体类对应的视图对象" Editor="" EditorBase="" Serializer="" %>
//------------------------------------------------------------------------------
// <auto-generated> BusinessObjectView.cst
//     此代码由工具生成.
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将丢失.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using <%=NameSpace%>.Utilities;

namespace <%=NameSpace%>.Entities
{
    /// <summary>
    /// 表示<%= GetTVRemark(View) %>Info.
	/// </summary>
    [Serializable]
    public partial class <%= GetClassName(View)%>Info 
    {
        <%foreach(ViewColumnSchema column in View.Columns)
		{
		%>
        /// <summary>
        /// 获取或设置 <%= GetPropDes(column) %>,<%= GetNullStr(column, View.ExtendedProperties) %>.
        /// </summary>
        public <%= GetCType(column, View.ExtendedProperties)%> <%=GetPropertyName(column)%> { get; set; }
		
		<%}%>
    }
}
<script runat="template">
public string GetStr(ViewSchema view)
{
	string ret = string.Empty;
	System.Text.StringBuilder sb = new System.Text.StringBuilder();
	foreach(ViewColumnSchema column in view.Columns)
	{
		if (!column.AllowDBNull && IsCanNullType(column.DataType))
		{
			sb.Append(column.Name);
			sb.Append(" == null || ");
		}
	}
	ret = sb.ToString();
	return ret.Substring(0, ret.Length - 4);
}

public bool IsAllAllowDBNull(ViewSchema view)
{
	foreach(ViewColumnSchema column in view.Columns)
	{
		if (!column.AllowDBNull && IsCanNullType(column.DataType))
			return false;
	}
	return true;
}

public string GetNullStr(ViewColumnSchema c, SchemaExplorer.ExtendedPropertyCollection ViewExtendedProperties)
{
	if (c.AllowDBNull)
	{
		if (c.NativeType == "nvarchar")
			return string.Format("可空,长度N{0}", c.Size);
		else if (c.NativeType == "varchar")
			return string.Format("可空,长度{0}", c.Size);
		else
			return "可空";
	}
	else
	{
		if (GetCType(c, ViewExtendedProperties) == "string")
			return string.Format("不可空,长度{0}", c.Size);
		else
			return "不可空";
	}
}

</script>