
<%@ CodeTemplate Language="C#" ResponseEncoding="UTF-8" TargetLanguage="Text" Src="Helper.cs" Inherits="Helper" Debug="False" Description="Template description here." %>
<%-- 程序集--%>
<%@ Assembly Name="System.Data" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%--导入命名空间 --%>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System.Text" %>
<%@ Import Namespace="SchemaExplorer" %>
<%--定义属性 --%>
<%@ Property Name="NameSpace" Type="System.String" Default="" Optional="False" Category="命名空间" Description="当前生成实体类的命名空间"  %>
<%@ Property Name="UtilitiesNameSpace" Type="System.String" Default="SmallShop" Optional="false" Category="" Description="当前工具类命名空间" %>
<%@ Property Name="Table" Type="SchemaExplorer.TableSchema" Default="" Optional="False" Category="数据库表对象" Description="实体类对应的表对象" Editor="" EditorBase="" Serializer="" %>
//------------------------------------------------------------------------------
// <auto-generated> BusinessObject.cst
//     此代码由工具生成.
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将丢失.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using <%=UtilitiesNameSpace%>.Utilities;

namespace <%=NameSpace%>.Entities
{
    /// <summary>
    /// 实体类 <%= GetTVRemark(Table) %>Info
	/// </summary>
    [Serializable]
    public partial class <%= GetClassName(Table)%>Info 
    {	
		<%foreach(ColumnSchema column in Table.Columns)
		{
		%>
        /// <summary>
        /// 获取或设置 <%= GetPropertyName(column) %>,<%= GetNullStr(column) %> 
        <% if (!string.IsNullOrEmpty(column.Description))
        {
        %>
        /// <%= column.Description %>
        <%}%>
        /// </summary>
        public <%= GetCType(column)%> <%=GetPropertyName(column)%> { get; set; }
		
		<%}%>
    }
}
<script runat="template">
public string GetStr(TableSchema table)
{
	string ret = string.Empty;
	System.Text.StringBuilder sb = new System.Text.StringBuilder();
	foreach(ColumnSchema column in Table.Columns)
	{
		if (!column.AllowDBNull && IsCanNullType(column.DataType))
		{
			sb.Append(column.Name);
			sb.Append(" == null || ");
		}
	}
	ret = sb.ToString();
	return ret.Substring(0, ret.Length - 4);
}

public bool IsAllAllowDBNull(TableSchema table)
{
	foreach(ColumnSchema column in table.Columns)
	{
		if (!column.AllowDBNull && IsCanNullType(column.DataType))
			return false;
	}
	return true;
}

</script>