<%@ CodeTemplate Language="C#" ResponseEncoding="UTF-8" TargetLanguage="Text" Src="Helper.cs" Inherits="Helper" Debug="False" Description="Template description here." %>
<%@ Assembly Name="System.Data" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Property Name="DataBase" Type="SchemaExplorer.DatabaseSchema" Category="2.数据库对象" Description="当前生成的数据库对象" %>
<%@ Property Name="NameSpace" Type="System.String" Default="" Optional="false" Category="1.命名空间" Description="当前生成命名空间" %>
<%@ Property Name="AutoExecuteScript" Type="System.Boolean" Default="False" Category="1. 是否自动执行生成后的脚本"
	Description="是否自动执行生成后的脚本" %>
<%@ Property Name="ModuleName" Type="System.String" Default="" Optional="false" Category="" Description="项目名称" %>
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将丢失。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Configuration.Provider;
using System.Web.Configuration;
using <%= NameSpace %>.DataModel;

namespace <%= NameSpace%>.BusinessRule
{
    /// <summary>
    /// 表示数据提供者基类。
    /// </summary>
    public abstract partial class <%= ModuleName%>Provider : ProviderBase
    {
		#region 系统设置
        private static <%= ModuleName%>Provider instance = null;
        private static <%= ModuleName%>ProviderCollection providers = null;
        private static readonly object lockObject = new object();

        /// <summary>
        /// 获取数据提供者。
        /// </summary>
        public static <%= ModuleName%>Provider Instance
        {
            get
            {
                LoadProviders();
                return instance;
            }
        }

        /// <summary>
        /// 获取数据提供者集合。
        /// </summary>
        public static <%= ModuleName%>ProviderCollection Providers
        {
            get
            {
                LoadProviders();
                return providers;
            }
        }

        /// <summary>
        /// 获取Provider。
        /// </summary>
        private static void LoadProviders()
        {
            // Avoid claiming lock if providers are already loaded
            if (instance == null)
            {
                lock (lockObject)
                {
                    // Do this again to make sure provider is still null
                    if (instance == null)
                    {
                        // Get a reference to the <imageService> section
                        <%= ModuleName%>ManagerSection section = (<%= ModuleName%>ManagerSection)WebConfigurationManager.GetSection("modules/<%= ConvertFirstLowerStr(ModuleName) %>Manager");

                        // Load registered providers and point provider
                        // to the default provider
                        providers = new <%= ModuleName%>ProviderCollection();
                        ProvidersHelper.InstantiateProviders(section.Providers, providers, typeof(<%= ModuleName%>Provider));
                        instance = providers[section.DefaultProvider];

                        if (instance == null)
                            throw new ProviderException("加载默认的项目数据提供者失败。");
                    }
                }
            }
        }

        /// <summary>
        /// 设置或获取数据提供者的应用程序名称。
        /// </summary>
        public abstract string ApplicationName { get; set; }
        #endregion
		
		#region CRUD
		<%
			foreach(TableSchema tv in DataBase.Tables)
			{
				if (IsExceptTable(tv)) continue;
		%>
		
        #region <%	Response.WriteLine(GetTVRemark(tv)); %>
		<% if (IsIntPk(tv)) {%>
		/// <summary>
        /// 创建<%= GetTVRemark(tv) %>。
        /// </summary>
        /// <param name="item">将要创建的<%= GetTVRemark(tv) %>。</param>
        /// <returns>返回成功创建的Id。</returns>
		/// <exception cref="System.ArgumentNullException">传入的参数为空，或参数引用的实例为空时抛出此异常。</exception>
		/// <exception cref="System.ArgumentOutOfRangeException">传入的参数超出范围时抛出此异常。</exception>
        public abstract int Create<%= GetClassName(tv)%>(<%= GetClassName(tv)%> item);
		<% } else { %>
		/// <summary>
        /// 创建<%= GetTVRemark(tv) %>。
        /// </summary>
        /// <param name="item">将要创建的<%= GetTVRemark(tv) %>。</param>
        /// <returns>返回成功创建的对象。</returns>
		/// <exception cref="System.ArgumentNullException">传入的参数为空，或参数引用的实例为空时抛出此异常。</exception>
		/// <exception cref="System.ArgumentOutOfRangeException">传入的参数超出范围时抛出此异常。</exception>
        public abstract <%= GetClassName(tv)%> Create<%= GetClassName(tv)%>(<%= GetClassName(tv)%> item);		
		<% } %>
	
	    /// <summary>
        /// 更新<%= GetTVRemark(tv) %>。
        /// </summary>
        /// <param name="item">将要更新的<%= GetTVRemark(tv) %>。</param>
		/// <exception cref="System.ArgumentNullException">传入的参数为空，或参数引用的实例为空时抛出此异常。</exception>
	    /// <exception cref="System.ArgumentOutOfRangeException">传入的参数超出范围时抛出此异常。</exception>
        public abstract void Update<%= GetClassName(tv)%>(<%= GetClassName(tv)%> item);
		
		/// <summary>
        /// 删除<%= GetTVRemark(tv) %>。
        /// </summary>
        <%foreach(ColumnSchema column in tv.Columns){ if (column.IsPrimaryKeyMember) {%>
	    /// <param name="<%= GetFiledName(column) %>">将要删除的<%= GetPropDes(column) %>。</param>
		<%}}%>
		/// <exception cref="System.ArgumentNullException">传入的参数为空，或参数引用的实例为空时抛出此异常。</exception>
        public abstract void Delete<%= GetClassName(tv)%>(<%= GetPKString3(tv) %>);
		
		/// <summary>
        /// 删除<%= GetTVRemark(tv) %>。
        /// </summary>
        <%foreach(ColumnSchema column in tv.Columns){ if (column.IsPrimaryKeyMember) {%>
	    /// <param name="<%= GetFiledName(column) %>">将要删除的<%= GetPropDes(column) %>。</param>
		<%}}%>
		/// <param name="isThrowException">当<%= GetTVRemark(tv) %>不存在时，是否引发异常。</param>
		/// <exception cref="System.ArgumentNullException">传入的参数为空，或参数引用的实例为空时抛出此异常。</exception>
        public abstract void Delete<%= GetClassName(tv)%>(<%= GetPKString3(tv) %>, bool isThrowException);
		
		/// <summary>
        /// 删除所有<%= GetTVRemark(tv) %>。
        /// </summary>
        public abstract void Delete<%= GetClassNames(tv)%>();
		
		/// <summary>
        /// 按条件删除<%= GetTVRemark(tv) %>。
        /// </summary>
		/// <param name="whereClause">过滤条件。</param>
        public abstract void Delete<%= GetClassNames(tv)%>(string whereClause);
		
		/// <summary>
        /// 获取<%= GetTVRemark(tv) %>。
        /// </summary>
        <%foreach(ColumnSchema column in tv.Columns){ if (column.IsPrimaryKeyMember) {%>
	    /// <param name="<%= GetFiledName(column) %>"><%= GetPropDes(column) %>。</param>
		<%}}%>
        /// <returns>返回获取的<%= GetTVRemark(tv) %>。</returns>
        public abstract <%= GetClassName(tv)%> Get<%= GetClassName(tv)%>(<%= GetPKString3(tv) %>);
		
		/// <summary>
        /// 获取所有<%= GetTVRemark(tv) %>。
        /// </summary>
        /// <returns>返回获取的<%= GetTVRemark(tv) %>集合。</returns>
		public abstract List<<%= GetClassName(tv)%>> Get<%= GetClassNames(tv)%>();
		
		/// <summary>
        /// 按条件获取所有<%= GetTVRemark(tv) %>。
        /// </summary>
		/// <param name="orderbyClause">排序条件。</param>
		/// <param name="whereClause">过滤条件。</param>
        /// <returns>返回获取的<%= GetTVRemark(tv) %>集合。</returns>
		public abstract List<<%= GetClassName(tv)%>> Get<%= GetClassNames(tv)%>(string orderbyClause, string whereClause);
		
		/// <summary>
        /// 分页方式获取<%= GetTVRemark(tv) %>。
        /// </summary>
        /// <param name="pageIndex">第几页。</param>
        /// <param name="pageSize">每页显示量。</param>
        /// <param name="totalRowsCount">总条数。</param>
        /// <returns>返回获取的<%= GetTVRemark(tv) %>集合。</returns>
		public abstract List<<%= GetClassName(tv)%>> Get<%= GetClassNames(tv)%>(int pageIndex, int pageSize, out int totalRowsCount);
		
		/// <summary>
        /// 按条件分页方式获取<%= GetTVRemark(tv) %>。
        /// </summary>
        /// <param name="pageIndex">第几页。</param>
        /// <param name="pageSize">每页显示量。</param>
        /// <param name="totalRowsCount">总条数。</param>
		/// <param name="oderbyClause">排序条件。</param>
		/// <param name="whereClause">过滤条件。</param>
        /// <returns>返回获取的<%= GetTVRemark(tv) %>集合。</returns>
		public abstract List<<%= GetClassName(tv)%>> Get<%= GetClassNames(tv)%>(int pageIndex, int pageSize, out int totalRowsCount, string oderbyClause, string whereClause);
		
		<% if (HadBankId(tv)) { %>
		/// <summary>
        /// 分页方式获取<%= GetTVRemark(tv) %>。
        /// </summary>
        /// <param name="pageIndex">第几页。</param>
        /// <param name="pageSize">每页显示量。</param>
        /// <param name="totalRowsCount">总条数。</param>
		/// <param name="bankId">第几页。</param>
        /// <returns>返回获取的<%= GetTVRemark(tv) %>集合。</returns>
		public abstract List<<%= GetClassName(tv)%>> Get<%= GetClassNames(tv)%>(int pageIndex, int pageSize, out int totalRowsCount, Guid bankId);
		<% } %>
		
		#endregion
		<%}%>
		
		<%-- View --%>
		<%
		foreach(ViewSchema tv in DataBase.Views)
		{ 
			if (IsExceptName(tv.Name)) continue;
		%>
		#region <%= GetTVRemark(tv) %>
		
		/// <summary>
        /// 获取所有<%= GetTVRemark(tv) %>。
        /// </summary>
        /// <returns>返回获取的<%= GetTVRemark(tv) %>集合。</returns>
		public abstract List<<%= GetClassName(tv)%>> Get<%= GetClassNames(tv)%>();
		
		/// <summary>
        /// 按条件获取所有<%= GetTVRemark(tv) %>。
        /// </summary>
		/// <param name="orderbyClause">排序条件。</param>
		/// <param name="whereClause">过滤条件。</param>
        /// <returns>返回获取的<%= GetTVRemark(tv) %>集合。</returns>
		public abstract List<<%= GetClassName(tv)%>> Get<%= GetClassNames(tv)%>(string orderbyClause, string whereClause);
		
		/// <summary>
        /// 分页方式获取<%= GetTVRemark(tv) %>。
        /// </summary>
        /// <param name="pageIndex">第几页。</param>
        /// <param name="pageSize">每页显示量。</param>
        /// <param name="totalRowsCount">总条数。</param>
        /// <returns>返回获取的<%= GetTVRemark(tv) %>集合。</returns>
		public abstract List<<%= GetClassName(tv)%>> Get<%= GetClassNames(tv)%>(int pageIndex, int pageSize, out int totalRowsCount);
		
		/// <summary>
        /// 分页方式获取<%= GetTVRemark(tv) %>。
        /// </summary>
        /// <param name="pageIndex">第几页。</param>
        /// <param name="pageSize">每页显示量。</param>
        /// <param name="totalRowsCount">总条数。</param>
		/// <param name="orderbyClause">排序条件。</param>
		/// <param name="whereClause">过滤条件。</param>
        /// <returns>返回获取的<%= GetTVRemark(tv) %>集合。</returns>
		public abstract List<<%= GetClassName(tv)%>> Get<%= GetClassNames(tv)%>(int pageIndex, int pageSize, out int totalRowsCount, string orderbyClause, string whereClause);

		<% if (HasIdColumn(tv)) {%>
		/// <summary>
        /// 获取<%= GetTVRemark(tv) %>。
        /// </summary>
        /// <param name="id">Id。</param>
        /// <returns>返回获取的<%= GetTVRemark(tv) %>。</returns>
        public abstract <%= GetClassName(tv)%> Get<%= GetClassName(tv)%>(<%= GetIdType(tv.Columns["Id"]) %> id);
		
		<% if (HadBankId(tv)) { %>
		/// <summary>
        /// 分页方式获取<%= GetTVRemark(tv) %>。
        /// </summary>
        /// <param name="pageIndex">第几页。</param>
        /// <param name="pageSize">每页显示量。</param>
        /// <param name="totalRowsCount">总条数。</param>
		/// <param name="bankId">第几页。</param>
        /// <returns>返回获取的<%= GetTVRemark(tv) %>集合。</returns>
		public abstract List<<%= GetClassName(tv)%>> Get<%= GetClassNames(tv)%>(int pageIndex, int pageSize, out int totalRowsCount, Guid bankId);
		<% }} %>
		
		#endregion
		
		<% } %>
		#endregion
		
		#region Coustom
		
		<%
		foreach(SpMethod spMethod in GetSpMethod(DataBase))
		{
		%>
		#region <%= spMethod.Name %>
		/// <summary>
        /// <%= spMethod.Remark %>。
        /// </summary>
		<%foreach(Para para in spMethod.Paras) {%>
	    /// <param name="<%= para.MethodName %>"><%= para.Remark %>。</param>
		<%}%>
		public abstract <%= spMethod.ReturnTypeStr %> <%= spMethod.Name %>(<%= spMethod.ParasToString() %>);
		#endregion
		
		<% } %>
		
		#endregion
    }
}
<script runat="template">
</script>